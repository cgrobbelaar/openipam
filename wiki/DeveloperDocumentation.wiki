#summary Documentation meant for openIPAM developers and system administrators.
#labels Featured,Design,Documentation

= Developer Documentation =

= Introduction =

openIPAM is a suite of applications designed to provide an intuitive and powerful IP address management system and solution for DNS and DHCP. The development of these applications has been built with the open source philosophy in mind so that other universities and businesses can benefit from (and contribute to) these applications in order to efficiently manage their own network space.

http://openipam.org/images/uploads/architecture.png

= Features Breakdown =
== Intuitive IP address management ==

From a high-level perspective, the most valuable feature of openIPAM is its web application interface. This interface gives users an intuitive tool for efficiently managing IP registrations. Permissions to this system can be very granular, giving large organizations or universities the tools to spread IP management out to all their network managers.

== Centralized webservice API ==

The core foundation of openIPAM is built around a single webservice. This allows the system to be customized for the specific implementation needs of different organizations. You can create smaller, more targeted systems for specific types of users that still interface with your main DNS server. For example, you may have network managers that need access to manage their areas, but also may have "normal" end-users who should see a much simpler registration system and be able to only register their machines, or simply need guest access to the network. Interfacing with the openIPAM webservices through remote procedure calls (RPC) makes setting up and integrating these sub-systems much easier.

For more information about how to customize openIPAM and create smaller sub-systems, see the webservice API section below.

== Under the hood: PowerDNS, PostgreSQL, and SQLAlchemy ==

For its backend DNS, openIPAM uses PowerDNS; one of the most widely-used, robust, and secure DNS solutions available on the market today. Since PowerDNS relies on a database as its data storage mechanism, we can rapidly manage information about hosts without the pain of flat text file maintenance.

For the database itself, PostgreSQL is the database of choice for systems that heavily rely on network data types such as IP addresses, MAC addresses, CIDR netmasks, etc. Postgres has built-in data types for all of these and is very efficient in querying and manipulating them, so Postgres was the natural choice of our team and the best tool for this project. Though PostgreSQL is the primary database choice of openIPAM, we use [http://www.sqlalchemy.org/ SQLAlchemy] (specifically, SQLAlchemy's [http://www.sqlalchemy.org/docs/05/sqlexpression.html SQL Expression Language]) as our interface to the database. SQLAlchemy allows for a system to be database-agnostic, so it could be a future goal for openIPAM to support other database backends (such as MySQL, Oracle or others). However, much of the internal code in openIPAM is Postgres-specific for efficiency's sake and it would require heavy modification to make it work with other databases. *At this time, there are no plans to support non-PostgreSQL databases in openIPAM.* 

It may be valuable to note that there is *enterprise support* available for Postgres if your business-model encourages this support. The company [http://enterprisedb.com/ EnterpriseDB] provides exactly this kind of support, specifically for PostgreSQL, both for their packaged versions and normal Postgres installations.

== DHCP Shared Leases ==

WRITEME

== Integration with LDAP for authentication ==

openIPAM allows for the use of an LDAP server as a source for user accounts. There is also internal authentication, so LDAP is not required, especially if few user accounts will be needed.

= Coding Conventions =

See the CodingConventions page for a style guide of how to write code for openIPAM.

= Installation and system requirements =

openIPAM has been developed to run on Linux and has not been tested on any other platforms. Personally, we developed and are using it on Debian, but you are free to run it on your distribution of choice. We have done some testing on RedHat Enterprise Linux and it worked well. Before trying to install openIPAM, make sure you have the following packages. Pay careful attention to not use an older package than recommended.

== Dependencies ==

 * WRITEME

Some of the following instructions will be Debian-specificâ€”you'll have to use your own distribution's package management.

First, add user named "openipam" to your Linux install. The options below move the user's home directory, disable the password (you must become root and then `su - openipam`), and set a user description.
{{{
# adduser --home /usr/local/openipam --disabled-password --gecos "openIPAM User" openipam
}}}

=== For the backend ===
To install the needed packages for the backend, run:
{{{
# apt-get install python-cherrypy3 python-ldap python-psycopg2 python-openssl python-sqlalchemy python-ipy python-cjson
}}}

=== For the database server ===
To install the needed packages for the database server, run:
{{{
# apt-get install postgresql
}}}

=== For the DHCP server ===
To install the needed packages for the DHCP server, run:
{{{
# apt-get install python-processing python-psycopg2 python-sqlalchemy
}}}

=== For the web interface ===
To install the needed packages for the web interface, run:
{{{
# apt-get install python-cherrypy3 python-openssl python-cheetah python-ipy python-cjson
}}}

Depending on your environment, a trusted signed certificate should be used on the production system. For testing and development purposes though, you can install the `ssl-cert` package and put the openipam user in the `ssl-cert` group and a self-signed certificate will be created for you by Debian and used by openIPAM. The default configuration files are made to use this self-signed cert by default. If you would like to do this, run the following:
{{{
# apt-get install  ssl-cert
# adduser openipam ssl-cert
}}}

== Download and configure openIPAM ==

Then, become the openipam user and download the code:
{{{
# su - openipam
$ svn checkout http://openipam.googlecode.com/svn/trunk/ .
}}}

Now, you can set up the configuration files for openIPAM. There is an example folder name `openipam_config.example`. You can copy this directory to `openipam_config` and modify the configuration. Run this as the openipam user:
{{{
$ cd openIPAM/
$ cp -r openipam_config.example/ openipam_config
$ rm -rf openipam_config/.svn
}}}

Depending on what processes you are running on which server(s), you'll need to edit the `openipam_config/backend.py` and `openipam_config/auth.py` file for the backend to work, and `openipam_config/frontend.py` for the web interface to work.  If you have certificate signed by a trusted CA, you can reference it under the `SSL` section in backend and frontend config files as well.

== Setting up PostgreSQL ==
{{{
# su - postgres
$ createuser openipam
Shall the new role be a superuser? (y/n) n
Shall the new role be allowed to create databases? (y/n) n
Shall the new role be allowed to create more new roles? (y/n) n
$ createdb -O openipam openipam
$ logout
}}}

Now, to actually create the openIPAM database structure, run:
{{{
# su - openipam
$ psql -d openipam -f openIPAM/sql/openipam_schema.sql

... lots of CREATE TABLE messages ...

}}}

Make sure there are no ERROR: messages in the output. If not, then the database schema was created successfully.

== Setting up PowerDNS ==

{{{
# Run on DNS server if using separate servers
apt-get install pdns-server pdns-backend-pgsql postgresql
}}}



== Installation ==

WRITEME

=== Creating local_settings.py ===

The next step is to customize local_settings.py. This is the main configuration file for openIPAM and gives specifics for connecting to the database, authentication, directory information, etc.

WRITEME

=== Using LDAP authentication ===

WRITEME

=== Starting the server ===

WRITEME

= Customizing openIPAM through the webservice API =

For information about what the webservice API could do for you, see the webservice API in the features section above.

The structure of the system is broken up into two main pieces:

 * The openIPAM web interface, which should be everything in ./web
 * The openIPAM backend, which should be everything else in ./backend, including the database, authentication, webservices, etc.

The core interface foundation of openIPAM is built around a single, fully-functional webservice API. The web application and any other piece that exists outside the backend performs functionality by means of this webservice. All communication between the web layer and the backend or database goes through this webservice layer. For now, our choice of transport has been XMLRPC (no support for SOAP or others at this point). However, we are looking at implementing other standards as well, such as JSONRPC.

If you write a interface to the openIPAM webservice in another language, please let us know!

== Customizing using Python ==

WRITEME